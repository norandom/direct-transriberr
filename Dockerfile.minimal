# Multi-stage build for minimal image size
FROM python:3.11-slim as builder

# Install only essential build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install uv for faster package installation
RUN pip install --no-cache-dir uv

WORKDIR /app

# Copy only necessary files for installation
COPY pyproject.toml ./
COPY src/ ./src/

# Create virtual environment and install dependencies
# Use CPU-only PyTorch to save space
ENV VIRTUAL_ENV=/opt/venv
RUN python -m venv $VIRTUAL_ENV && \
    . $VIRTUAL_ENV/bin/activate && \
    uv pip install --no-cache \
    --index-url https://download.pytorch.org/whl/cpu \
    torch torchaudio && \
    uv pip install --no-cache -e . && \
    # Remove unnecessary files to reduce size
    find $VIRTUAL_ENV -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true && \
    find $VIRTUAL_ENV -type f -name "*.pyc" -delete && \
    find $VIRTUAL_ENV -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true && \
    find $VIRTUAL_ENV -type d -name "*.dist-info" -exec rm -rf {}/tests {} + 2>/dev/null || true && \
    # Remove PyTorch test files and other large unnecessary components
    rm -rf $VIRTUAL_ENV/lib/python*/site-packages/torch/test && \
    rm -rf $VIRTUAL_ENV/lib/python*/site-packages/torch/include && \
    rm -rf $VIRTUAL_ENV/lib/python*/site-packages/caffe2/test

# Final stage - minimal runtime
FROM python:3.11-slim

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Set environment to use venv
ENV PATH="/opt/venv/bin:$PATH"
ENV VIRTUAL_ENV=/opt/venv
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Disable CUDA
ENV CUDA_VISIBLE_DEVICES=""
ENV TORCH_CUDA_VERSION=None

# Create necessary directories with proper permissions
RUN mkdir -p /input /output /models && \
    chmod 755 /input /output /models

# Add non-root user for security
RUN useradd -m -s /bin/bash transcriber && \
    chown -R transcriber:transcriber /input /output /models

USER transcriber

WORKDIR /workspace

# Default command
CMD ["direct-transcriber", "--help"]